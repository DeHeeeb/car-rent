{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"A1/","text":"Arbeitspaket 1 \u2013 Big Picture / Vision Hilfsmittel: Whiteboard, Flipchart, Postit, Word, UML Tool, Markdown, \u2026 Aufgabe Erstellen Sie mittels C4-Pattern das Big-Picture des Systems. Context Containers Components","title":"Arbeitspaket 1 \u2013 Big Picture / Vision"},{"location":"A1/#arbeitspaket-1-big-picture-vision","text":"Hilfsmittel: Whiteboard, Flipchart, Postit, Word, UML Tool, Markdown, \u2026","title":"Arbeitspaket 1 \u2013 Big Picture / Vision"},{"location":"A1/#aufgabe","text":"Erstellen Sie mittels C4-Pattern das Big-Picture des Systems.","title":"Aufgabe"},{"location":"A1/#context","text":"","title":"Context"},{"location":"A1/#containers","text":"","title":"Containers"},{"location":"A1/#components","text":"","title":"Components"},{"location":"A2/","text":"Arbeitspaket 2 \u2013 Domain Model und Use Cases Hilfsmittel: UML Tool, Markdown, \u2026 Aufgabe Erstellen Sie das Domain Model und schreiben Sie die alle Use Cases im \u201eBrief\u201c-Format auf. Domain Model Use Cases im \"Brief\" Format 1 - Kunden verwalten Der Sachbearbeiter kann: neue Kunden erfassen bestehende Kunden bearbeiten alte Kunden l\u00f6schen / deaktivieren nach Kunden suchen 2 - Autos verwalten Der Sachbearbeiter kann: neue Autos erfassen Autos bearbeiten alte / verkaufte Autos deaktivieren nach Autos suchen 3 - Kunde erstelt Reservation der Kunde sucht nach einem Auto dabei kann er nach der Klasse filtern anschliessend gibt er das Start- und Enddatum der Reservation an er erh\u00e4lt die Gesamtkosten der Reservation die Reservation wird gespeichert 4 - Kunde holt Auto ab Am Startdatum kommt der Kunde in die Garage und der Sachbearbeiter klickt bei der entsprechenden Reservation: Mietvertrag generieren Dieser Button wandelt die Reservation in einen Mietvertrag um. Das Reservationsmodel hat ein Flag \"Mietvertrag\". Dieses wird just in diesem Moment auf true gesetzt. Der Kunde unterzeichnet den Vertrag und kann das Auto mitnehmen.","title":"Arbeitspaket 2 \u2013 Domain Model und Use Cases"},{"location":"A2/#arbeitspaket-2-domain-model-und-use-cases","text":"Hilfsmittel: UML Tool, Markdown, \u2026","title":"Arbeitspaket 2 \u2013 Domain Model und Use Cases"},{"location":"A2/#aufgabe","text":"Erstellen Sie das Domain Model und schreiben Sie die alle Use Cases im \u201eBrief\u201c-Format auf.","title":"Aufgabe"},{"location":"A2/#domain-model","text":"","title":"Domain Model"},{"location":"A2/#use-cases-im-brief-format","text":"1 - Kunden verwalten Der Sachbearbeiter kann: neue Kunden erfassen bestehende Kunden bearbeiten alte Kunden l\u00f6schen / deaktivieren nach Kunden suchen 2 - Autos verwalten Der Sachbearbeiter kann: neue Autos erfassen Autos bearbeiten alte / verkaufte Autos deaktivieren nach Autos suchen 3 - Kunde erstelt Reservation der Kunde sucht nach einem Auto dabei kann er nach der Klasse filtern anschliessend gibt er das Start- und Enddatum der Reservation an er erh\u00e4lt die Gesamtkosten der Reservation die Reservation wird gespeichert 4 - Kunde holt Auto ab Am Startdatum kommt der Kunde in die Garage und der Sachbearbeiter klickt bei der entsprechenden Reservation: Mietvertrag generieren Dieser Button wandelt die Reservation in einen Mietvertrag um. Das Reservationsmodel hat ein Flag \"Mietvertrag\". Dieses wird just in diesem Moment auf true gesetzt. Der Kunde unterzeichnet den Vertrag und kann das Auto mitnehmen.","title":"Use Cases im \"Brief\" Format"},{"location":"A3/","text":"Arbeitspaket 3 \u2013 4+1 Views Hilfsmittel: UML Tool, Markdown, \u2026 Aufgabe Deployment View Logical View Implementation View","title":"Arbeitspaket 3 \u2013 4+1 Views"},{"location":"A3/#arbeitspaket-3-41-views","text":"Hilfsmittel: UML Tool, Markdown, \u2026","title":"Arbeitspaket 3 \u2013 4+1 Views"},{"location":"A3/#aufgabe","text":"","title":"Aufgabe"},{"location":"A3/#deployment-view","text":"","title":"Deployment View"},{"location":"A3/#logical-view","text":"","title":"Logical View"},{"location":"A3/#implementation-view","text":"","title":"Implementation View"},{"location":"A4/","text":"Arbeitspaket 4 \u2013 Implementierung Hilfsmittel: VS2019, \u2026 Aufgabe Implementieren Sie das System mit Hilfe der Anforderungen und den verschiedenen Architecture Views.","title":"Arbeitspaket 4 \u2013 Implementierung"},{"location":"A4/#arbeitspaket-4-implementierung","text":"Hilfsmittel: VS2019, \u2026","title":"Arbeitspaket 4 \u2013 Implementierung"},{"location":"A4/#aufgabe","text":"Implementieren Sie das System mit Hilfe der Anforderungen und den verschiedenen Architecture Views.","title":"Aufgabe"},{"location":"A5/","text":"Arbeitspaket 5 \u2013 Continuous Integration und Metriken Hilfsmittel: CI/CD (Travis, GitLab, ...), SonarQube, Code Analysis, \u2026 Aufgabe Hier soll der erstellen der jar, wars und weitere deployables automatisch nach jedem check-in gebaut und getestet werden. Zudem soll das Buildsystem weitere Metriken (code-coverage, code-qualtity, \u2026) messen und darstellen.","title":"Arbeitspaket 5 \u2013 Continuous Integration und Metriken"},{"location":"A5/#arbeitspaket-5-continuous-integration-und-metriken","text":"Hilfsmittel: CI/CD (Travis, GitLab, ...), SonarQube, Code Analysis, \u2026","title":"Arbeitspaket 5 \u2013 Continuous Integration und Metriken"},{"location":"A5/#aufgabe","text":"Hier soll der erstellen der jar, wars und weitere deployables automatisch nach jedem check-in gebaut und getestet werden. Zudem soll das Buildsystem weitere Metriken (code-coverage, code-qualtity, \u2026) messen und darstellen.","title":"Aufgabe"},{"location":"A6/","text":"Arbeitspaket 6 \u2013 Dokumentation Aufgabe About arc42 arc42, the Template for documentation of software and system architecture. By Dr. Gernot Starke, Dr. Peter Hruschka and contributors. Template Revision: 7.0 EN (based on asciidoc), January 2017 \u00a9 We acknowledge that this document uses material from the arc 42 architecture template, http://www.arc42.de . Created by Dr. Peter Hruschka & Dr. Gernot Starke. Introduction and Goals Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus Server-Teilen und optional einen Web-Client bestehen. a) Die Daten sollen mittels \u00abRepository Pattern\u00bb in eine Datenbank gespeichert werden k\u00f6nnen. b) Die Business Logik soll auf dem Backend laufen und REST APIs anbieten. c) Es soll zuerst ein Monolith erstellt werden und sp\u00e4ter auf eine Micro Service Architektur \u00fcberf\u00fchrt werden. Optional: d) Der Web-Client benutzt die REST API um die Funktionen auszuf\u00fchren. Folgende Detailinformationen liegen unstrukturiert \u00fcber das zu entwickelnde System vor: Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage (Start/Enddatum) angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt. Architecture Constraints VS2019 / .NET Core Nodejs NPM Postman System Scope and Context siehe Aufgabe 1 Building Block View siehe Aufgabe 2 Runtime View siehe Aufgabe 3 Deployment View siehe Aufgabe 3","title":"Arbeitspaket 6 \u2013 Dokumentation"},{"location":"A6/#arbeitspaket-6-dokumentation","text":"","title":"Arbeitspaket 6 \u2013 Dokumentation"},{"location":"A6/#aufgabe","text":"About arc42 arc42, the Template for documentation of software and system architecture. By Dr. Gernot Starke, Dr. Peter Hruschka and contributors. Template Revision: 7.0 EN (based on asciidoc), January 2017 \u00a9 We acknowledge that this document uses material from the arc 42 architecture template, http://www.arc42.de . Created by Dr. Peter Hruschka & Dr. Gernot Starke.","title":"Aufgabe"},{"location":"A6/#introduction-and-goals","text":"Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus Server-Teilen und optional einen Web-Client bestehen. a) Die Daten sollen mittels \u00abRepository Pattern\u00bb in eine Datenbank gespeichert werden k\u00f6nnen. b) Die Business Logik soll auf dem Backend laufen und REST APIs anbieten. c) Es soll zuerst ein Monolith erstellt werden und sp\u00e4ter auf eine Micro Service Architektur \u00fcberf\u00fchrt werden. Optional: d) Der Web-Client benutzt die REST API um die Funktionen auszuf\u00fchren. Folgende Detailinformationen liegen unstrukturiert \u00fcber das zu entwickelnde System vor: Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage (Start/Enddatum) angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt.","title":"Introduction and Goals"},{"location":"A6/#architecture-constraints","text":"VS2019 / .NET Core Nodejs NPM Postman","title":"Architecture Constraints"},{"location":"A6/#system-scope-and-context","text":"siehe Aufgabe 1","title":"System Scope and Context"},{"location":"A6/#building-block-view","text":"siehe Aufgabe 2","title":"Building Block View"},{"location":"A6/#runtime-view","text":"siehe Aufgabe 3","title":"Runtime View"},{"location":"A6/#deployment-view","text":"siehe Aufgabe 3","title":"Deployment View"}]}